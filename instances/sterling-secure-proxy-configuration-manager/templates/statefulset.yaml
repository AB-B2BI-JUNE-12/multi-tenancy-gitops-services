{{- include "sch.config.init" (list . "ibm-ssp-cm.sch.chart.config.values") }}
{{ $appName := include "sch.names.appName" (list .) }}
{{ $fullName := include "sch.names.fullName" (list .) }}
{{ $saName := include "sch.names.fullCompName" (list . "serviceaccount") }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{  include "sch.names.statefulSetName" (list .) }}
  labels:
    app.kubernetes.io/name: {{  $appName  }}
    app.kubernetes.io/instance: {{  .Release.Name  }}
    app.kubernetes.io/managed-by: {{  .Release.Service  }}
    helm.sh/chart: {{  include "ibm-ssp-cm.chart" .  }}
    release: {{  .Release.Name  }}
    author: IBM
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{  $appName  }}
      app.kubernetes.io/instance: {{  .Release.Name  }}
      author: IBM
  serviceName: {{ $fullName }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{  $appName  }}
        app.kubernetes.io/instance: {{  .Release.Name  }}
        app.kubernetes.io/managed-by: {{  .Release.Service  }}
        helm.sh/chart: {{  include "ibm-ssp-cm.chart" .  }}
        release: {{  .Release.Name  }}
        author: IBM

      annotations:
{{- include "sch.metadata.annotations.metering" (list . .sch.chart.metering "" "" nil) | indent 8 }}

    spec:
      {{- if .Values.serviceAccount.create }}
      serviceAccountName: {{ $saName }}
      {{- else }} 
      serviceAccountName: {{ .Values.serviceAccount.name | default "default" }}
      {{- end }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext: 
{{ include "sch.security.securityContext" (list . .sch.chart.podSecurityContext) | indent 8 }}
      affinity:
{{- include "ibm-ssp-cm.nodeAffinity" (list . .Values.affinity.nodeAffinity) | indent 8 }}
{{- include "ibm-ssp-cm.podAffinity" (list . .Values.affinity.podAffinity) | indent 8 }}
{{- include "ibm-ssp-cm.podAntiAffinity" (list . .Values.affinity.podAntiAffinity) | indent 8 }} 
      {{- if or (.Release.IsInstall) (.Values.customCertificate.customCertEnabled) }}
      initContainers:
      - name: {{ $fullName }}-init-secret
        {{- if .Values.image.digest.enabled }}
        image: "{{  .Values.image.repository  }}@{{ .Values.image.digest.value }}"
        {{- else }}
        image: "{{  .Values.image.repository  }}:{{ .Values.image.tag  }}"
        {{- end }}
        imagePullPolicy: {{  .Values.image.pullPolicy  }}
        env:
        - name: SUPPLEMENTAL_GROUP
          value: "{{  .Values.storageSecurity.supplementalGroupId  }}"
        command: ["/spinstall/maintenance.sh", "populateSecret"]
        volumeMounts:
        - mountPath: /spinstall/IBM/SPcm
          name: cm-pvc
          subPath: CM
        - mountPath: /cmConfig/secret_files
          name: cm-secret
        securityContext:
{{ include "sch.security.securityContext" (list . .sch.chart.initContainerSecurityContext) | indent 12 }}
        resources:
          limits:
{{ toYaml .Values.resources.limits | indent 14 }}
          requests:
{{ toYaml .Values.resources.requests | indent 14 }}
      {{- end }}         
      containers:
      - name: {{ $fullName }}
        {{- if .Values.image.digest.enabled }}
        image: "{{  .Values.image.repository  }}@{{ .Values.image.digest.value }}"
        {{- else }}
        image: "{{  .Values.image.repository  }}:{{ .Values.image.tag  }}"
        {{- end }}
        imagePullPolicy: {{  .Values.image.pullPolicy  }}
        env:
        - name: REVISION_NUMBER
          value: "{{  .Release.Revision  }}"
        volumeMounts:
        - mountPath: /spinstall/IBM/SPcm
          name: cm-pvc
          subPath: CM
        {{- if or (.Values.customCertificate.customCertEnabled) (.Values.customFiles) }}
        - mountPath: /spinstall/resources
          name: cm-pvc
          subPath: CM_RESOURCES
        {{- end }}
        - mountPath: /cmConfig
          name: cm-config
        {{- if .Values.secret.keyCertSecretName }}
        - mountPath: /cmConfig/cert
          name: cm-cert-secret
        {{- end }}
        tty: false
        stdin: false
        securityContext:
{{ include "sch.security.securityContext" (list . .sch.chart.containerSecurityContext) | indent 12 }}

          # Set liveness probe to determine if CM is running
        livenessProbe:
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          exec:              
            command: 
            - bash
            - -c
            - monitorService.sh {{  .Values.service.jetty.containerPort  }}
        # Set readiness probe to determine if CM is running
        readinessProbe: 
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          exec:              
            command: 
            - bash
            - -c
            - monitorService.sh {{  .Values.service.jetty.containerPort  }}             
        resources:
          limits:
{{ toYaml .Values.resources.limits | indent 14 }}
          requests:
{{ toYaml .Values.resources.requests | indent 14 }}
          
      # Create a volume which will be used while creating the container.
      # The volume claim needs to be created before using this volume.
      volumes:
      - name: cm-pvc
        persistentVolumeClaim:
          {{- if .Values.persistentVolume.existingClaimName }}
          claimName: {{ .Values.persistentVolume.existingClaimName }}
          {{- else }}
          claimName: {{  $fullName  }}-pvc
          {{- end }}
      - name: cm-config 
        configMap:
          name: {{ $fullName }}
      {{- if or (.Release.IsInstall) (.Values.customCertificate.customCertEnabled) }}
      - name: cm-secret
        secret: 
          secretName: {{  .Values.secret.secretName  }}
      {{- end }}
      {{- if .Values.secret.keyCertSecretName }}
      - name: cm-cert-secret
        secret: 
          secretName: {{  .Values.secret.keyCertSecretName  }}
      {{- end }}
      
